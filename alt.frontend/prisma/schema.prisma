// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./msg.db"
}

model User {
  id             String           @id @default(uuid())
  connectionId   String           @unique
  username       String
  identityKey    IdentityKeyPair?
  registrationId RegistrationId?
  preKeys        PreKey[]
  contacts       Contact[]
}

model IdentityKeyPair {
  id         String @id @default(uuid())
  publicKey  String
  privateKey String
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique
}

model RegistrationId {
  id             String @id @default(uuid())
  registrationId Int
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
}

model PreKey {
  id         String  @id @default(uuid())
  keyId      Int     @unique
  publicKey  String
  privateKey String
  signature  String?
  keyType    String // 'Signed' or 'OneTime'
  isUsed     Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
  userId     String
}

model Contact {
  id           String       @id @default(uuid())
  connectionId String       @unique @map("contactId")
  nickname     String?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  session      Session?
  identityKey  IdentityKey?
  chat         Chat?
}

model IdentityKey {
  id        String  @id @default(uuid())
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId String  @unique
  publicKey String
}

model Session {
  id          String  @id @default(uuid())
  contact     Contact @relation(fields: [contactId], references: [id])
  contactId   String  @unique
  sessionData String // Serialized session data
}

model Chat {
  id        String    @id @default(uuid())
  contact   Contact   @relation(fields: [contactId], references: [id])
  contactId String    @unique
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id          String   @id @default(uuid())
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      String
  senderId    String
  content     String
  timestamp   DateTime @default(now())
  isDelivered Boolean  @default(false)
  isRead      Boolean  @default(false)
}
